[project]
name = "aipscan"
version = "0.9.0"
description = "A reporting system for Archivematica using data from AIPs."
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "click",
    "celery",
    "faker",
    "filelock",
    "flask",
    "flask-restx",
    "flask-sqlalchemy",
    "flask-wtf",
    "gunicorn",
    "typesense",
    "wtforms",
    "lxml",
    "metsrw",
    "natsort",
    "pandas",
    "plotly-express",
    "pymysql[rsa]",
    "python-dateutil",
    "requests",
    "sqlalchemy",
]

[dependency-groups]
dev = [
    "faker",
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "ruff>=0.13.0",
    "tzlocal",
]
linting = ["pre-commit-uv"]

[tool.pytest.ini_options]
testpaths = ["AIPscan", "tools"]

[tool.ruff]
target-version = "py39"

[tool.ruff.lint]
select = ["A", "B", "C", "E", "F", "I", "T", "UP", "W"]
ignore = [
    "E501", # lines-too-long
    "C416", # unnecessary-comprehension
    "C408", # unnecessary-collection-call
    "C401", # unnecessary-generator-set
    "C405", # unnecessary-literal-set
]

[tool.ruff.lint.per-file-ignores]
"tools/**/*" = ["T201"]

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.mccabe]
# We have a couple of instances where complexity > 10.
max-complexity = 12

[tool.tox]
requires = ["tox>=4", "tox-uv>=1"]
env_list = ["py39", "py310", "py311", "py312", "linting"]

[tool.tox.env_run_base]
runner = "uv-venv-lock-runner"
dependency_groups = ["dev"]
commands = [["pytest", { replace = "posargs", default = [], extend = true }]]

[tool.tox.env.linting]
runner = "uv-venv-lock-runner"
skip_install = true
dependency_groups = ["linting"]
commands = [
    [
        "pre-commit",
        "run",
        "--all-files",
        "--show-diff-on-failure",
        { replace = "posargs", default = [
        ], extend = true },
    ],
]
